{"version":3,"file":"mdast-util-math-Dj7v4WU-.js","sources":["../../node_modules/mdast-util-math/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('../index.js').InlineMath} InlineMath\n * @typedef {import('../index.js').Math} Math\n *\n * @typedef ToOptions\n *   Configuration.\n * @property {boolean | null | undefined} [singleDollarTextMath=true]\n *   Whether to support math (text) with a single dollar (default: `true`).\n *\n *   Single dollars work in Pandoc and many other places, but often interfere\n *   with “normal” dollars in text.\n *   If you turn this off, you can still use two or more dollars for text math.\n */\n\nimport {ok as assert} from 'devlop'\nimport {longestStreak} from 'longest-streak'\n\n/**\n * Create an extension for `mdast-util-from-markdown`.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function mathFromMarkdown() {\n  return {\n    enter: {\n      mathFlow: enterMathFlow,\n      mathFlowFenceMeta: enterMathFlowMeta,\n      mathText: enterMathText\n    },\n    exit: {\n      mathFlow: exitMathFlow,\n      mathFlowFence: exitMathFlowFence,\n      mathFlowFenceMeta: exitMathFlowMeta,\n      mathFlowValue: exitMathData,\n      mathText: exitMathText,\n      mathTextData: exitMathData\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMathFlow(token) {\n    /** @type {HastElement} */\n    const code = {\n      type: 'element',\n      tagName: 'code',\n      properties: {className: ['language-math', 'math-display']},\n      children: []\n    }\n    this.enter(\n      {\n        type: 'math',\n        meta: null,\n        value: '',\n        data: {hName: 'pre', hChildren: [code]}\n      },\n      token\n    )\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMathFlowMeta() {\n    this.buffer()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMathFlowMeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'math')\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMathFlowFence() {\n    // Exit if this is the closing fence.\n    if (this.data.mathFlowInside) return\n    this.buffer()\n    this.data.mathFlowInside = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMathFlow(token) {\n    const data = this.resume().replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'math')\n    this.exit(token)\n    node.value = data\n    // @ts-expect-error: we defined it in `enterMathFlow`.\n    const code = /** @type {HastElement} */ (node.data.hChildren[0])\n    assert(code.type === 'element')\n    assert(code.tagName === 'code')\n    code.children.push({type: 'text', value: data})\n    this.data.mathFlowInside = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function enterMathText(token) {\n    this.enter(\n      {\n        type: 'inlineMath',\n        value: '',\n        data: {\n          hName: 'code',\n          hProperties: {className: ['language-math', 'math-inline']},\n          hChildren: []\n        }\n      },\n      token\n    )\n    this.buffer()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMathText(token) {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'inlineMath')\n    this.exit(token)\n    node.value = data\n    const children = /** @type {Array<HastElementContent>} */ (\n      // @ts-expect-error: we defined it in `enterMathFlow`.\n      node.data.hChildren\n    )\n    children.push({type: 'text', value: data})\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {FromMarkdownHandle}\n   */\n  function exitMathData(token) {\n    this.config.enter.data.call(this, token)\n    this.config.exit.data.call(this, token)\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown`.\n *\n * @param {ToOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function mathToMarkdown(options) {\n  let single = (options || {}).singleDollarTextMath\n\n  if (single === null || single === undefined) {\n    single = true\n  }\n\n  inlineMath.peek = inlineMathPeek\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'mathFlowMeta'},\n      {character: '\\n', inConstruct: 'mathFlowMeta'},\n      {\n        character: '$',\n        after: single ? undefined : '\\\\$',\n        inConstruct: 'phrasing'\n      },\n      {character: '$', inConstruct: 'mathFlowMeta'},\n      {atBreak: true, character: '$', after: '\\\\$'}\n    ],\n    handlers: {math, inlineMath}\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Math} node\n   */\n  // Note: fixing this code? Please also fix the similar code for code:\n  // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/main/lib/handle/code.js>\n  function math(node, _, state, info) {\n    const raw = node.value || ''\n    const tracker = state.createTracker(info)\n    const sequence = '$'.repeat(Math.max(longestStreak(raw, '$') + 1, 2))\n    const exit = state.enter('mathFlow')\n    let value = tracker.move(sequence)\n\n    if (node.meta) {\n      const subexit = state.enter('mathFlowMeta')\n      value += tracker.move(\n        state.safe(node.meta, {\n          after: '\\n',\n          before: value,\n          encode: ['$'],\n          ...tracker.current()\n        })\n      )\n      subexit()\n    }\n\n    value += tracker.move('\\n')\n\n    if (raw) {\n      value += tracker.move(raw + '\\n')\n    }\n\n    value += tracker.move(sequence)\n    exit()\n    return value\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineMath} node\n   */\n  // Note: fixing this code? Please also fix the similar code for inline code:\n  // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/main/lib/handle/inline-code.js>\n  function inlineMath(node, _, state) {\n    let value = node.value || ''\n    let size = 1\n\n    if (!single) size++\n\n    // If there is a single dollar sign on its own in the math, use a fence of\n    // two.\n    // If there are two in a row, use one.\n    while (\n      new RegExp('(^|[^$])' + '\\\\$'.repeat(size) + '([^$]|$)').test(value)\n    ) {\n      size++\n    }\n\n    const sequence = '$'.repeat(size)\n\n    // If this is not just spaces or eols (tabs don’t count), and either the\n    // first and last character are a space or eol, or the first or last\n    // character are dollar signs, then pad with spaces.\n    if (\n      // Contains non-space.\n      /[^ \\r\\n]/.test(value) &&\n      // Starts with space and ends with space.\n      ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) ||\n        // Starts or ends with dollar.\n        /^\\$|\\$$/.test(value))\n    ) {\n      value = ' ' + value + ' '\n    }\n\n    let index = -1\n\n    // We have a potential problem: certain characters after eols could result in\n    // blocks being seen.\n    // For example, if someone injected the string `'\\n# b'`, then that would\n    // result in an ATX heading.\n    // We can’t escape characters in `inlineMath`, but because eols are\n    // transformed to spaces when going from markdown to HTML anyway, we can swap\n    // them out.\n    while (++index < state.unsafe.length) {\n      const pattern = state.unsafe[index]\n\n      // Only look for `atBreak`s.\n      // Btw: note that `atBreak` patterns will always start the regex at LF or\n      // CR.\n      if (!pattern.atBreak) continue\n\n      const expression = state.compilePattern(pattern)\n      /** @type {RegExpExecArray | null} */\n      let match\n\n      while ((match = expression.exec(value))) {\n        let position = match.index\n\n        // Support CRLF (patterns only look for one of the characters).\n        if (\n          value.codePointAt(position) === 10 /* `\\n` */ &&\n          value.codePointAt(position - 1) === 13 /* `\\r` */\n        ) {\n          position--\n        }\n\n        value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n      }\n    }\n\n    return sequence + value + sequence\n  }\n\n  /**\n   * @returns {string}\n   */\n  function inlineMathPeek() {\n    return '$'\n  }\n}\n"],"names":["mathFromMarkdown","enterMathFlow","enterMathFlowMeta","enterMathText","exitMathFlow","exitMathFlowFence","exitMathFlowMeta","exitMathData","exitMathText","token","code","data","node","assert","mathToMarkdown","options","single","inlineMath","inlineMathPeek","math","_","state","info","raw","tracker","sequence","longestStreak","exit","value","subexit","size","index","pattern","expression","match","position"],"mappings":"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","x_google_ignoreList":[0]}