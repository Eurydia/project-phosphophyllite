{"version":3,"file":"hast-util-parse-selector-TXfch5wI.js","sources":["../../node_modules/hast-util-parse-selector/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n */\n\n/**\n * @template {string} SimpleSelector\n *   Selector type.\n * @template {string} DefaultTagName\n *   Default tag name.\n * @typedef {(\n *   SimpleSelector extends ''\n *     ? DefaultTagName\n *     : SimpleSelector extends `${infer TagName}.${infer Rest}`\n *     ? ExtractTagName<TagName, DefaultTagName>\n *     : SimpleSelector extends `${infer TagName}#${infer Rest}`\n *     ? ExtractTagName<TagName, DefaultTagName>\n *     : SimpleSelector extends string\n *     ? SimpleSelector\n *     : DefaultTagName\n * )} ExtractTagName\n *   Extract tag name from a simple selector.\n */\n\nconst search = /[#.]/g\n\n/**\n * Create a hast element from a simple CSS selector.\n *\n * @template {string} Selector\n *   Type of selector.\n * @template {string} [DefaultTagName='div']\n *   Type of default tag name (default: `'div'`).\n * @param {Selector | null | undefined} [selector]\n *   Simple CSS selector (optional).\n *\n *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).\n *   Multiple classes are allowed.\n *   Uses the last ID if multiple IDs are found.\n * @param {DefaultTagName | null | undefined} [defaultTagName='div']\n *   Tag name to use if `selector` does not specify one (default: `'div'`).\n * @returns {Element & {tagName: ExtractTagName<Selector, DefaultTagName>}}\n *   Built element.\n */\nexport function parseSelector(selector, defaultTagName) {\n  const value = selector || ''\n  /** @type {Properties} */\n  const props = {}\n  let start = 0\n  /** @type {string | undefined} */\n  let previous\n  /** @type {string | undefined} */\n  let tagName\n\n  while (start < value.length) {\n    search.lastIndex = start\n    const match = search.exec(value)\n    const subvalue = value.slice(start, match ? match.index : value.length)\n\n    if (subvalue) {\n      if (!previous) {\n        tagName = subvalue\n      } else if (previous === '#') {\n        props.id = subvalue\n      } else if (Array.isArray(props.className)) {\n        props.className.push(subvalue)\n      } else {\n        props.className = [subvalue]\n      }\n\n      start += subvalue.length\n    }\n\n    if (match) {\n      previous = match[0]\n      start++\n    }\n  }\n\n  return {\n    type: 'element',\n    // @ts-expect-error: tag name is parsed.\n    tagName: tagName || defaultTagName || 'div',\n    properties: props,\n    children: []\n  }\n}\n"],"names":["search","parseSelector","selector","defaultTagName","value","props","start","previous","tagName","match","subvalue"],"mappings":"AAwBA,MAAMA,EAAS,QAoBR,SAASC,EAAcC,EAAUC,EAAgB,CACtD,MAAMC,EAAQF,GAAY,GAEpBG,EAAQ,CAAE,EAChB,IAAIC,EAAQ,EAERC,EAEAC,EAEJ,KAAOF,EAAQF,EAAM,QAAQ,CAC3BJ,EAAO,UAAYM,EACnB,MAAMG,EAAQT,EAAO,KAAKI,CAAK,EACzBM,EAAWN,EAAM,MAAME,EAAOG,EAAQA,EAAM,MAAQL,EAAM,MAAM,EAElEM,IACGH,EAEMA,IAAa,IACtBF,EAAM,GAAKK,EACF,MAAM,QAAQL,EAAM,SAAS,EACtCA,EAAM,UAAU,KAAKK,CAAQ,EAE7BL,EAAM,UAAY,CAACK,CAAQ,EAN3BF,EAAUE,EASZJ,GAASI,EAAS,QAGhBD,IACFF,EAAWE,EAAM,CAAC,EAClBH,IAEH,CAED,MAAO,CACL,KAAM,UAEN,QAASE,GAAWL,GAAkB,MACtC,WAAYE,EACZ,SAAU,CAAE,CACb,CACH","x_google_ignoreList":[0]}