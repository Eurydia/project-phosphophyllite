{"version":3,"file":"@remix-run-B1vbsBIE.js","sources":["../../node_modules/@remix-run/router/dist/router.js"],"sourcesContent":["/**\n * @remix-run/router v1.15.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === matches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized;\n  let hasLazyRoutes = initialMatches.some(m => m.route.lazy);\n  let hasLoaders = initialMatches.some(m => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = m => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) return true;\n      // Explicitly opting-in to running on hydration\n      if (m.route.loader.hydrate === true) return false;\n      // Otherwise, initialized if hydrated with data or an error\n      return loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined;\n    };\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: opts.viewTransitionOpts,\n      unstable_flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // Create a GET request for the loaders\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    if (!isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration)) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors).filter(_ref2 => {\n        let [id] = _ref2;\n        return !matchesToLoad.some(m => m.route.id === id);\n      }).forEach(_ref3 => {\n        let [routeId, error] = _ref3;\n        errors = Object.assign(errors || {}, {\n          [routeId]: error\n        });\n      });\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, flushSync, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, flushSync, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(state, actionResult, {\n            fetcherSubmission: submission\n          });\n        }\n      }\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    );\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(state, redirect, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true\n    });\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref4) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref4;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      });\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref5) => {\n        let [name, value] = _ref5;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (isInitialLoad) {\n      if (route.loader.hydrate) {\n        return true;\n      }\n      return state.loaderData[route.id] === undefined && (\n      // Don't re-run if the loader ran and threw an error\n      !state.errors || state.errors[route.id] === undefined);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, v7_relativeSplatPath, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let resultType;\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  if (isResponse(result)) {\n    let status = result.status;\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location, v7_relativeSplatPath);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null\n      };\n    }\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse = {\n        type: resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result\n      };\n      throw queryRouteResponse;\n    }\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n"],"names":["_extends","target","i","source","key","Action","PopStateEventType","createHashHistory","options","createHashLocation","window","globalHistory","pathname","search","hash","parsePath","createLocation","createHashHref","to","base","href","url","hashIndex","createPath","validateHashLocation","location","warning","getUrlBasedHistory","invariant","value","message","cond","createKey","getHistoryState","index","current","state","_ref","path","parsedPath","searchIndex","getLocation","createHref","validateLocation","v5Compat","action","listener","getIndex","handlePop","nextIndex","delta","history","push","historyState","error","replace","createURL","fn","n","ResultType","immutableRouteKeys","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","parentsMeta","flattenRoute","relativePath","meta","joinPaths","routesMeta","computeScore","_route$path","exploded","explodeOptionalSegments","segments","first","rest","isOptional","required","restExploded","result","subpath","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","score","segment","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","normalizePathname","pattern","matcher","compiledParams","compilePath","pathnameBase","captureGroups","memo","paramName","splatValue","caseSensitive","regexpSource","_","v","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","idx","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","json","data","init","responseInit","headers","ErrorResponseImpl","status","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","IDLE_FETCHER","IDLE_BLOCKER","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","future","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","hasLazyRoutes","m","hasLoaders","errors","isRouteInitialized","router","pendingAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","historyAction","blockerKey","shouldBlockNavigation","updateBlocker","blockers","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","dispose","deleteFetcher","deleteBlocker","subscribe","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","subscriber","completeNavigation","_temp","_location$state","_location$state2","flushSync","isActionReload","isMutationMethod","actionData","mergeLoaderData","k","preventScrollReset","viewTransitionOpts","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","submission","normalizeNavigateOptions","currentLocation","nextLocation","userReplace","revalidate","interruptActiveLoads","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","pendingError","findNearestBoundary","actionOutput","handleAction","getLoadingNavigation","shortCircuited","handleLoaders","navigation","getSubmittingNavigation","actionMatch","getTargetMatch","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","overrideNavigation","fetcherSubmission","initialHydration","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","routeId","updatedFetchers","markFetchRedirectsDone","rf","revalidatingFetcher","getLoadingFetcher","abortFetcher","abortPendingFetchRevalidations","f","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","redirect","findRedirect","fetcherKey","processLoaderData","deferredData","aborted","_ref2","_ref3","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResult","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","r","doneFetcher","resolveDeferredData","_temp2","redirectLocation","isDocumentReload","redirectHistoryAction","formMethod","formAction","formEncType","currentMatches","fetchersToLoad","resolveDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","controller","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","_ref4","entries","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","_internalSetRoutes","newRoutes","isSubmissionNavigation","prependBasename","fromRouteId","relative","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","isValidMethod","getInvalidBodyError","rawFormMethod","stripHashFromPath","text","acc","_ref5","name","searchParams","formData","convertFormDataToSearchParams","convertSearchParamsToFormData","getLoaderMatchesUntilBoundary","boundaryId","boundaryMatches","isInitialLoad","currentUrl","nextUrl","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","isPropertyStaticallyDefined","type","resultType","onReject","runHandler","handler","reject","abortPromise","handlerError","values","e","isResponse","isSameBasename","contentType","isDeferredData","_result$init","_result$init2","signal","processRouteLoaderData","statusCode","foundError","loaderHeaders","newLoaderData","mergedLoaderData","_temp5","method","errorMessage","deferred","signals","isRevalidatingLoader","unwrap","_window","transitions","sessionPositions"],"mappings":"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","x_google_ignoreList":[0]}