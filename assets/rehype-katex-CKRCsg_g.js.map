{"version":3,"file":"rehype-katex-CKRCsg_g.js","sources":["../../node_modules/rehype-katex/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('katex').KatexOptions} KatexOptions\n *\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef {Omit<KatexOptions, 'displayMode' | 'throwOnError'>} Options\n */\n\nimport {fromHtmlIsomorphic} from 'hast-util-from-html-isomorphic'\nimport {toText} from 'hast-util-to-text'\nimport katex from 'katex'\nimport {SKIP, visitParents} from 'unist-util-visit-parents'\n\n/** @type {Readonly<Options>} */\nconst emptyOptions = {}\n/** @type {ReadonlyArray<unknown>} */\nconst emptyClasses = []\n\n/**\n * Render elements with a `language-math` (or `math-display`, `math-inline`)\n * class with KaTeX.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeKatex(options) {\n  const settings = options || emptyOptions\n\n  /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    visitParents(tree, 'element', function (element, parents) {\n      const classes = Array.isArray(element.properties.className)\n        ? element.properties.className\n        : emptyClasses\n      // This class can be generated from markdown with ` ```math `.\n      const languageMath = classes.includes('language-math')\n      // This class is used by `remark-math` for flow math (block, `$$\\nmath\\n$$`).\n      const mathDisplay = classes.includes('math-display')\n      // This class is used by `remark-math` for text math (inline, `$math$`).\n      const mathInline = classes.includes('math-inline')\n      let displayMode = mathDisplay\n\n      // Any class is fine.\n      if (!languageMath && !mathDisplay && !mathInline) {\n        return\n      }\n\n      let parent = parents[parents.length - 1]\n      let scope = element\n\n      // If this was generated with ` ```math `, replace the `<pre>` and use\n      // display.\n      if (\n        element.tagName === 'code' &&\n        languageMath &&\n        parent &&\n        parent.type === 'element' &&\n        parent.tagName === 'pre'\n      ) {\n        scope = parent\n        parent = parents[parents.length - 2]\n        displayMode = true\n      }\n\n      /* c8 ignore next -- verbose to test. */\n      if (!parent) return\n\n      const value = toText(scope, {whitespace: 'pre'})\n\n      /** @type {Array<ElementContent> | string | undefined} */\n      let result\n\n      try {\n        result = katex.renderToString(value, {\n          ...settings,\n          displayMode,\n          throwOnError: true\n        })\n      } catch (error) {\n        const cause = /** @type {Error} */ (error)\n        const ruleId = cause.name.toLowerCase()\n\n        file.message('Could not render math with KaTeX', {\n          ancestors: [...parents, element],\n          cause,\n          place: element.position,\n          ruleId,\n          source: 'rehype-katex'\n        })\n\n        // KaTeX can handle `ParseError` itself, but not others.\n        if (ruleId === 'parseerror') {\n          result = katex.renderToString(value, {\n            ...settings,\n            displayMode,\n            strict: 'ignore',\n            throwOnError: false\n          })\n        }\n        // Generate similar markup if this is an other error.\n        // See: <https://github.com/KaTeX/KaTeX/blob/5dc7af0/docs/error.md>.\n        else {\n          result = [\n            {\n              type: 'element',\n              tagName: 'span',\n              properties: {\n                className: ['katex-error'],\n                style: 'color:' + (settings.errorColor || '#cc0000'),\n                title: String(error)\n              },\n              children: [{type: 'text', value}]\n            }\n          ]\n        }\n      }\n\n      if (typeof result === 'string') {\n        const root = fromHtmlIsomorphic(result, {fragment: true})\n        // Cast as we donâ€™t expect `doctypes` in KaTeX result.\n        result = /** @type {Array<ElementContent>} */ (root.children)\n      }\n\n      const index = parent.children.indexOf(scope)\n      parent.children.splice(index, 1, ...result)\n      return SKIP\n    })\n  }\n}\n"],"names":["emptyOptions","emptyClasses","rehypeKatex","options","settings","tree","file","visitParents","element","parents","classes","languageMath","mathDisplay","mathInline","displayMode","parent","scope","value","toText","result","katex","error","cause","ruleId","fromHtmlIsomorphic","index","SKIP"],"mappings":"+NAmBA,MAAMA,EAAe,CAAE,EAEjBC,EAAe,CAAE,EAWR,SAASC,EAAYC,EAAS,CAC3C,MAAMC,EAAWD,GAAWH,EAY5B,OAAO,SAAUK,EAAMC,EAAM,CAC3BC,EAAaF,EAAM,UAAW,SAAUG,EAASC,EAAS,CACxD,MAAMC,EAAU,MAAM,QAAQF,EAAQ,WAAW,SAAS,EACtDA,EAAQ,WAAW,UACnBP,EAEEU,EAAeD,EAAQ,SAAS,eAAe,EAE/CE,EAAcF,EAAQ,SAAS,cAAc,EAE7CG,EAAaH,EAAQ,SAAS,aAAa,EACjD,IAAII,EAAcF,EAGlB,GAAI,CAACD,GAAgB,CAACC,GAAe,CAACC,EACpC,OAGF,IAAIE,EAASN,EAAQA,EAAQ,OAAS,CAAC,EACnCO,EAAQR,EAiBZ,GAZEA,EAAQ,UAAY,QACpBG,GACAI,GACAA,EAAO,OAAS,WAChBA,EAAO,UAAY,QAEnBC,EAAQD,EACRA,EAASN,EAAQA,EAAQ,OAAS,CAAC,EACnCK,EAAc,IAIZ,CAACC,EAAQ,OAEb,MAAME,EAAQC,EAAOF,EAAO,CAAC,WAAY,KAAK,CAAC,EAG/C,IAAIG,EAEJ,GAAI,CACFA,EAASC,EAAM,eAAeH,EAAO,CACnC,GAAGb,EACH,YAAAU,EACA,aAAc,EACxB,CAAS,CACF,OAAQO,EAAO,CACd,MAAMC,EAA8BD,EAC9BE,EAASD,EAAM,KAAK,YAAa,EAEvChB,EAAK,QAAQ,mCAAoC,CAC/C,UAAW,CAAC,GAAGG,EAASD,CAAO,EAC/B,MAAAc,EACA,MAAOd,EAAQ,SACf,OAAAe,EACA,OAAQ,cAClB,CAAS,EAGGA,IAAW,aACbJ,EAASC,EAAM,eAAeH,EAAO,CACnC,GAAGb,EACH,YAAAU,EACA,OAAQ,SACR,aAAc,EAC1B,CAAW,EAKDK,EAAS,CACP,CACE,KAAM,UACN,QAAS,OACT,WAAY,CACV,UAAW,CAAC,aAAa,EACzB,MAAO,UAAYf,EAAS,YAAc,WAC1C,MAAO,OAAOiB,CAAK,CACpB,EACD,SAAU,CAAC,CAAC,KAAM,OAAQ,MAAAJ,CAAK,CAAC,CACjC,CACF,CAEJ,CAEG,OAAOE,GAAW,WAGpBA,EAFaK,EAAmBL,EAAQ,CAAC,SAAU,EAAI,CAAC,EAEJ,UAGtD,MAAMM,EAAQV,EAAO,SAAS,QAAQC,CAAK,EAC3C,OAAAD,EAAO,SAAS,OAAOU,EAAO,EAAG,GAAGN,CAAM,EACnCO,CACb,CAAK,CACF,CACH","x_google_ignoreList":[0]}