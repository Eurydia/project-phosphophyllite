{"version":3,"file":"hastscript-C3d41mAm.js","sources":["../../node_modules/hastscript/lib/create-h.js","../../node_modules/hastscript/lib/svg-case-sensitive-tag-names.js","../../node_modules/hastscript/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').RootContent} RootContent\n *\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef {Element | Root} Result\n *   Result from a `h` (or `s`) call.\n *\n * @typedef {number | string} StyleValue\n *   Value for a CSS style field.\n * @typedef {Record<string, StyleValue>} Style\n *   Supported value of a `style` prop.\n * @typedef {boolean | number | string | null | undefined} PrimitiveValue\n *   Primitive property value.\n * @typedef {Array<number | string>} ArrayValue\n *   List of property values for space- or comma separated values (such as `className`).\n * @typedef {ArrayValue | PrimitiveValue} PropertyValue\n *   Primitive value or list value.\n * @typedef {{[property: string]: PropertyValue | Style}} Properties\n *   Acceptable value for element properties.\n *\n * @typedef {number | string | null | undefined} PrimitiveChild\n *   Primitive children, either ignored (nullish), or turned into text nodes.\n * @typedef {Array<ArrayChildNested | Nodes | PrimitiveChild>} ArrayChild\n *   List of children.\n * @typedef {Array<Nodes | PrimitiveChild>} ArrayChildNested\n *   List of children (deep).\n * @typedef {ArrayChild | Nodes | PrimitiveChild} Child\n *   Acceptable child value.\n */\n\nimport {parse as commas} from 'comma-separated-tokens'\nimport {parseSelector} from 'hast-util-parse-selector'\nimport {find, normalize} from 'property-information'\nimport {parse as spaces} from 'space-separated-tokens'\n\nconst buttonTypes = new Set(['button', 'menu', 'reset', 'submit'])\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Schema} schema\n *   Schema to use.\n * @param {string} defaultTagName\n *   Default tag name.\n * @param {Array<string> | undefined} [caseSensitive]\n *   Case-sensitive tag names (default: `undefined`).\n * @returns\n *   `h`.\n */\nexport function createH(schema, defaultTagName, caseSensitive) {\n  const adjust = caseSensitive && createAdjustMap(caseSensitive)\n\n  /**\n   * Hyperscript compatible DSL for creating virtual hast trees.\n   *\n   * @overload\n   * @param {null | undefined} [selector]\n   * @param {...Child} children\n   * @returns {Root}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {Properties} properties\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @param {string | null | undefined} [selector]\n   *   Selector.\n   * @param {Child | Properties | null | undefined} [properties]\n   *   Properties (or first child) (default: `undefined`).\n   * @param {...Child} children\n   *   Children.\n   * @returns {Result}\n   *   Result.\n   */\n  function h(selector, properties, ...children) {\n    let index = -1\n    /** @type {Result} */\n    let node\n\n    if (selector === undefined || selector === null) {\n      node = {type: 'root', children: []}\n      // Properties are not supported for roots.\n      const child = /** @type {Child} */ (properties)\n      children.unshift(child)\n    } else {\n      node = parseSelector(selector, defaultTagName)\n      // Normalize the name.\n      node.tagName = node.tagName.toLowerCase()\n      if (adjust && own.call(adjust, node.tagName)) {\n        node.tagName = adjust[node.tagName]\n      }\n\n      // Handle props.\n      if (isProperties(properties, node.tagName)) {\n        /** @type {string} */\n        let key\n\n        for (key in properties) {\n          if (own.call(properties, key)) {\n            addProperty(schema, node.properties, key, properties[key])\n          }\n        }\n      } else {\n        children.unshift(properties)\n      }\n    }\n\n    // Handle children.\n    while (++index < children.length) {\n      addChild(node.children, children[index])\n    }\n\n    if (node.type === 'element' && node.tagName === 'template') {\n      node.content = {type: 'root', children: node.children}\n      node.children = []\n    }\n\n    return node\n  }\n\n  return h\n}\n\n/**\n * Check if something is properties or a child.\n *\n * @param {Child | Properties} value\n *   Value to check.\n * @param {string} name\n *   Tag name.\n * @returns {value is Properties}\n *   Whether `value` is a properties object.\n */\nfunction isProperties(value, name) {\n  if (\n    value === null ||\n    value === undefined ||\n    typeof value !== 'object' ||\n    Array.isArray(value)\n  ) {\n    return false\n  }\n\n  if (name === 'input' || !value.type || typeof value.type !== 'string') {\n    return true\n  }\n\n  if ('children' in value && Array.isArray(value.children)) {\n    return false\n  }\n\n  if (name === 'button') {\n    return buttonTypes.has(value.type.toLowerCase())\n  }\n\n  return !('value' in value)\n}\n\n/**\n * @param {Schema} schema\n *   Schema.\n * @param {Properties} properties\n *   Properties object.\n * @param {string} key\n *   Property name.\n * @param {PropertyValue | Style} value\n *   Property value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addProperty(schema, properties, key, value) {\n  const info = find(schema, key)\n  let index = -1\n  /** @type {PropertyValue} */\n  let result\n\n  // Ignore nullish and NaN values.\n  if (value === undefined || value === null) return\n\n  if (typeof value === 'number') {\n    // Ignore NaN.\n    if (Number.isNaN(value)) return\n\n    result = value\n  }\n  // Booleans.\n  else if (typeof value === 'boolean') {\n    result = value\n  }\n  // Handle list values.\n  else if (typeof value === 'string') {\n    if (info.spaceSeparated) {\n      result = spaces(value)\n    } else if (info.commaSeparated) {\n      result = commas(value)\n    } else if (info.commaOrSpaceSeparated) {\n      result = spaces(commas(value).join(' '))\n    } else {\n      result = parsePrimitive(info, info.property, value)\n    }\n  } else if (Array.isArray(value)) {\n    result = value.concat()\n  } else {\n    result = info.property === 'style' ? style(value) : String(value)\n  }\n\n  if (Array.isArray(result)) {\n    /** @type {Array<number | string>} */\n    const finalResult = []\n\n    while (++index < result.length) {\n      // Assume no booleans in array.\n      const value = /** @type {number | string} */ (\n        parsePrimitive(info, info.property, result[index])\n      )\n      finalResult[index] = value\n    }\n\n    result = finalResult\n  }\n\n  // Class names (which can be added both on the `selector` and here).\n  if (info.property === 'className' && Array.isArray(properties.className)) {\n    // Assume no booleans in `className`.\n    const value = /** @type {number | string} */ (result)\n    result = properties.className.concat(value)\n  }\n\n  properties[info.property] = result\n}\n\n/**\n * @param {Array<RootContent>} nodes\n *   Children.\n * @param {Child} value\n *   Child.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChild(nodes, value) {\n  let index = -1\n\n  if (value === undefined || value === null) {\n    // Empty.\n  } else if (typeof value === 'string' || typeof value === 'number') {\n    nodes.push({type: 'text', value: String(value)})\n  } else if (Array.isArray(value)) {\n    while (++index < value.length) {\n      addChild(nodes, value[index])\n    }\n  } else if (typeof value === 'object' && 'type' in value) {\n    if (value.type === 'root') {\n      addChild(nodes, value.children)\n    } else {\n      nodes.push(value)\n    }\n  } else {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\n  }\n}\n\n/**\n * Parse a single primitives.\n *\n * @param {Info} info\n *   Property information.\n * @param {string} name\n *   Property name.\n * @param {PrimitiveValue} value\n *   Property value.\n * @returns {PrimitiveValue}\n *   Property value.\n */\nfunction parsePrimitive(info, name, value) {\n  if (typeof value === 'string') {\n    if (info.number && value && !Number.isNaN(Number(value))) {\n      return Number(value)\n    }\n\n    if (\n      (info.boolean || info.overloadedBoolean) &&\n      (value === '' || normalize(value) === normalize(name))\n    ) {\n      return true\n    }\n  }\n\n  return value\n}\n\n/**\n * Serialize a `style` object as a string.\n *\n * @param {Style} value\n *   Style object.\n * @returns {string}\n *   CSS string.\n */\nfunction style(value) {\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      result.push([key, value[key]].join(': '))\n    }\n  }\n\n  return result.join('; ')\n}\n\n/**\n * Create a map to adjust casing.\n *\n * @param {Array<string>} values\n *   List of properly cased keys.\n * @returns {Record<string, string>}\n *   Map of lowercase keys to uppercase keys.\n */\nfunction createAdjustMap(values) {\n  /** @type {Record<string, string>} */\n  const result = {}\n  let index = -1\n\n  while (++index < values.length) {\n    result[values[index].toLowerCase()] = values[index]\n  }\n\n  return result\n}\n","export const svgCaseSensitiveTagNames = [\n  'altGlyph',\n  'altGlyphDef',\n  'altGlyphItem',\n  'animateColor',\n  'animateMotion',\n  'animateTransform',\n  'clipPath',\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feDropShadow',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feImage',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n  'foreignObject',\n  'glyphRef',\n  'linearGradient',\n  'radialGradient',\n  'solidColor',\n  'textArea',\n  'textPath'\n]\n","/**\n * @typedef {import('./create-h.js').Child} Child\n *   Acceptable child value.\n * @typedef {import('./create-h.js').Properties} Properties\n *   Acceptable value for element properties.\n * @typedef {import('./create-h.js').Result} Result\n *   Result from a `h` (or `s`) call.\n */\n\n// Register the JSX namespace on `h`.\n/**\n * @typedef {import('./jsx-classic.js').Element} h.JSX.Element\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} h.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} h.JSX.IntrinsicElements\n */\n\n// Register the JSX namespace on `s`.\n/**\n * @typedef {import('./jsx-classic.js').Element} s.JSX.Element\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} s.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} s.JSX.IntrinsicElements\n */\n\nimport {html, svg} from 'property-information'\nimport {createH} from './create-h.js'\nimport {svgCaseSensitiveTagNames} from './svg-case-sensitive-tag-names.js'\n\n// Note: this explicit type is needed, otherwise TS creates broken types.\n/** @type {ReturnType<createH>} */\nexport const h = createH(html, 'div')\n\n// Note: this explicit type is needed, otherwise TS creates broken types.\n/** @type {ReturnType<createH>} */\nexport const s = createH(svg, 'g', svgCaseSensitiveTagNames)\n"],"names":["buttonTypes","own","createH","schema","defaultTagName","caseSensitive","adjust","createAdjustMap","h","selector","properties","children","index","node","child","parseSelector","isProperties","key","addProperty","addChild","value","name","info","find","result","spaces","commas","parsePrimitive","style","finalResult","nodes","normalize","values","svgCaseSensitiveTagNames","html","s","svg"],"mappings":"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","x_google_ignoreList":[0,1,2]}