{"version":3,"file":"match-sorter-C_hz5zXn.js","sources":["../../node_modules/match-sorter/dist/match-sorter.esm.js"],"sourcesContent":["import removeAccents from 'remove-accents';\n\n/**\n * @name match-sorter\n * @license MIT license.\n * @copyright (c) 2020 Kent C. Dodds\n * @author Kent C. Dodds <me@kentcdodds.com> (https://kentcdodds.com)\n */\nconst rankings = {\n  CASE_SENSITIVE_EQUAL: 7,\n  EQUAL: 6,\n  STARTS_WITH: 5,\n  WORD_STARTS_WITH: 4,\n  CONTAINS: 3,\n  ACRONYM: 2,\n  MATCHES: 1,\n  NO_MATCH: 0\n};\nconst defaultBaseSortFn = (a, b) => String(a.rankedValue).localeCompare(String(b.rankedValue));\n\n/**\n * Takes an array of items and a value and returns a new array with the items that match the given value\n * @param {Array} items - the items to sort\n * @param {String} value - the value to use for ranking\n * @param {Object} options - Some options to configure the sorter\n * @return {Array} - the new sorted array\n */\nfunction matchSorter(items, value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    keys,\n    threshold = rankings.MATCHES,\n    baseSort = defaultBaseSortFn,\n    sorter = matchedItems => matchedItems.sort((a, b) => sortRankedValues(a, b, baseSort))\n  } = options;\n  const matchedItems = items.reduce(reduceItemsToRanked, []);\n  return sorter(matchedItems).map(_ref => {\n    let {\n      item\n    } = _ref;\n    return item;\n  });\n  function reduceItemsToRanked(matches, item, index) {\n    const rankingInfo = getHighestRanking(item, keys, value, options);\n    const {\n      rank,\n      keyThreshold = threshold\n    } = rankingInfo;\n    if (rank >= keyThreshold) {\n      matches.push({\n        ...rankingInfo,\n        item,\n        index\n      });\n    }\n    return matches;\n  }\n}\nmatchSorter.rankings = rankings;\n\n/**\n * Gets the highest ranking for value for the given item based on its values for the given keys\n * @param {*} item - the item to rank\n * @param {Array} keys - the keys to get values from the item for the ranking\n * @param {String} value - the value to rank against\n * @param {Object} options - options to control the ranking\n * @return {{rank: Number, keyIndex: Number, keyThreshold: Number}} - the highest ranking\n */\nfunction getHighestRanking(item, keys, value, options) {\n  if (!keys) {\n    // if keys is not specified, then we assume the item given is ready to be matched\n    const stringItem = item;\n    return {\n      // ends up being duplicate of 'item' in matches but consistent\n      rankedValue: stringItem,\n      rank: getMatchRanking(stringItem, value, options),\n      keyIndex: -1,\n      keyThreshold: options.threshold\n    };\n  }\n  const valuesToRank = getAllValuesToRank(item, keys);\n  return valuesToRank.reduce((_ref2, _ref3, i) => {\n    let {\n      rank,\n      rankedValue,\n      keyIndex,\n      keyThreshold\n    } = _ref2;\n    let {\n      itemValue,\n      attributes\n    } = _ref3;\n    let newRank = getMatchRanking(itemValue, value, options);\n    let newRankedValue = rankedValue;\n    const {\n      minRanking,\n      maxRanking,\n      threshold\n    } = attributes;\n    if (newRank < minRanking && newRank >= rankings.MATCHES) {\n      newRank = minRanking;\n    } else if (newRank > maxRanking) {\n      newRank = maxRanking;\n    }\n    if (newRank > rank) {\n      rank = newRank;\n      keyIndex = i;\n      keyThreshold = threshold;\n      newRankedValue = itemValue;\n    }\n    return {\n      rankedValue: newRankedValue,\n      rank,\n      keyIndex,\n      keyThreshold\n    };\n  }, {\n    rankedValue: item,\n    rank: rankings.NO_MATCH,\n    keyIndex: -1,\n    keyThreshold: options.threshold\n  });\n}\n\n/**\n * Gives a rankings score based on how well the two strings match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Object} options - options for the match (like keepDiacritics for comparison)\n * @returns {Number} the ranking for how well stringToRank matches testString\n */\nfunction getMatchRanking(testString, stringToRank, options) {\n  testString = prepareValueForComparison(testString, options);\n  stringToRank = prepareValueForComparison(stringToRank, options);\n\n  // too long\n  if (stringToRank.length > testString.length) {\n    return rankings.NO_MATCH;\n  }\n\n  // case sensitive equals\n  if (testString === stringToRank) {\n    return rankings.CASE_SENSITIVE_EQUAL;\n  }\n\n  // Lower casing before further comparison\n  testString = testString.toLowerCase();\n  stringToRank = stringToRank.toLowerCase();\n\n  // case insensitive equals\n  if (testString === stringToRank) {\n    return rankings.EQUAL;\n  }\n\n  // starts with\n  if (testString.startsWith(stringToRank)) {\n    return rankings.STARTS_WITH;\n  }\n\n  // word starts with\n  if (testString.includes(` ${stringToRank}`)) {\n    return rankings.WORD_STARTS_WITH;\n  }\n\n  // contains\n  if (testString.includes(stringToRank)) {\n    return rankings.CONTAINS;\n  } else if (stringToRank.length === 1) {\n    // If the only character in the given stringToRank\n    //   isn't even contained in the testString, then\n    //   it's definitely not a match.\n    return rankings.NO_MATCH;\n  }\n\n  // acronym\n  if (getAcronym(testString).includes(stringToRank)) {\n    return rankings.ACRONYM;\n  }\n\n  // will return a number between rankings.MATCHES and\n  // rankings.MATCHES + 1 depending  on how close of a match it is.\n  return getClosenessRanking(testString, stringToRank);\n}\n\n/**\n * Generates an acronym for a string.\n *\n * @param {String} string the string for which to produce the acronym\n * @returns {String} the acronym\n */\nfunction getAcronym(string) {\n  let acronym = '';\n  const wordsInString = string.split(' ');\n  wordsInString.forEach(wordInString => {\n    const splitByHyphenWords = wordInString.split('-');\n    splitByHyphenWords.forEach(splitByHyphenWord => {\n      acronym += splitByHyphenWord.substr(0, 1);\n    });\n  });\n  return acronym;\n}\n\n/**\n * Returns a score based on how spread apart the\n * characters from the stringToRank are within the testString.\n * A number close to rankings.MATCHES represents a loose match. A number close\n * to rankings.MATCHES + 1 represents a tighter match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @returns {Number} the number between rankings.MATCHES and\n * rankings.MATCHES + 1 for how well stringToRank matches testString\n */\nfunction getClosenessRanking(testString, stringToRank) {\n  let matchingInOrderCharCount = 0;\n  let charNumber = 0;\n  function findMatchingCharacter(matchChar, string, index) {\n    for (let j = index, J = string.length; j < J; j++) {\n      const stringChar = string[j];\n      if (stringChar === matchChar) {\n        matchingInOrderCharCount += 1;\n        return j + 1;\n      }\n    }\n    return -1;\n  }\n  function getRanking(spread) {\n    const spreadPercentage = 1 / spread;\n    const inOrderPercentage = matchingInOrderCharCount / stringToRank.length;\n    const ranking = rankings.MATCHES + inOrderPercentage * spreadPercentage;\n    return ranking;\n  }\n  const firstIndex = findMatchingCharacter(stringToRank[0], testString, 0);\n  if (firstIndex < 0) {\n    return rankings.NO_MATCH;\n  }\n  charNumber = firstIndex;\n  for (let i = 1, I = stringToRank.length; i < I; i++) {\n    const matchChar = stringToRank[i];\n    charNumber = findMatchingCharacter(matchChar, testString, charNumber);\n    const found = charNumber > -1;\n    if (!found) {\n      return rankings.NO_MATCH;\n    }\n  }\n  const spread = charNumber - firstIndex;\n  return getRanking(spread);\n}\n\n/**\n * Sorts items that have a rank, index, and keyIndex\n * @param {Object} a - the first item to sort\n * @param {Object} b - the second item to sort\n * @return {Number} -1 if a should come first, 1 if b should come first, 0 if equal\n */\nfunction sortRankedValues(a, b, baseSort) {\n  const aFirst = -1;\n  const bFirst = 1;\n  const {\n    rank: aRank,\n    keyIndex: aKeyIndex\n  } = a;\n  const {\n    rank: bRank,\n    keyIndex: bKeyIndex\n  } = b;\n  const same = aRank === bRank;\n  if (same) {\n    if (aKeyIndex === bKeyIndex) {\n      // use the base sort function as a tie-breaker\n      return baseSort(a, b);\n    } else {\n      return aKeyIndex < bKeyIndex ? aFirst : bFirst;\n    }\n  } else {\n    return aRank > bRank ? aFirst : bFirst;\n  }\n}\n\n/**\n * Prepares value for comparison by stringifying it, removing diacritics (if specified)\n * @param {String} value - the value to clean\n * @param {Object} options - {keepDiacritics: whether to remove diacritics}\n * @return {String} the prepared value\n */\nfunction prepareValueForComparison(value, _ref4) {\n  let {\n    keepDiacritics\n  } = _ref4;\n  // value might not actually be a string at this point (we don't get to choose)\n  // so part of preparing the value for comparison is ensure that it is a string\n  value = `${value}`; // toString\n  if (!keepDiacritics) {\n    value = removeAccents(value);\n  }\n  return value;\n}\n\n/**\n * Gets value for key in item at arbitrarily nested keypath\n * @param {Object} item - the item\n * @param {Object|Function} key - the potentially nested keypath or property callback\n * @return {Array} - an array containing the value(s) at the nested keypath\n */\nfunction getItemValues(item, key) {\n  if (typeof key === 'object') {\n    key = key.key;\n  }\n  let value;\n  if (typeof key === 'function') {\n    value = key(item);\n  } else if (item == null) {\n    value = null;\n  } else if (Object.hasOwnProperty.call(item, key)) {\n    value = item[key];\n  } else if (key.includes('.')) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    return getNestedValues(key, item);\n  } else {\n    value = null;\n  }\n\n  // because `value` can also be undefined\n  if (value == null) {\n    return [];\n  }\n  if (Array.isArray(value)) {\n    return value;\n  }\n  return [String(value)];\n}\n\n/**\n * Given path: \"foo.bar.baz\"\n * And item: {foo: {bar: {baz: 'buzz'}}}\n *   -> 'buzz'\n * @param path a dot-separated set of keys\n * @param item the item to get the value from\n */\nfunction getNestedValues(path, item) {\n  const keys = path.split('.');\n  let values = [item];\n  for (let i = 0, I = keys.length; i < I; i++) {\n    const nestedKey = keys[i];\n    let nestedValues = [];\n    for (let j = 0, J = values.length; j < J; j++) {\n      const nestedItem = values[j];\n      if (nestedItem == null) continue;\n      if (Object.hasOwnProperty.call(nestedItem, nestedKey)) {\n        const nestedValue = nestedItem[nestedKey];\n        if (nestedValue != null) {\n          nestedValues.push(nestedValue);\n        }\n      } else if (nestedKey === '*') {\n        // ensure that values is an array\n        nestedValues = nestedValues.concat(nestedItem);\n      }\n    }\n    values = nestedValues;\n  }\n  if (Array.isArray(values[0])) {\n    // keep allowing the implicit wildcard for an array of strings at the end of\n    // the path; don't use `.flat()` because that's not available in node.js v10\n    const result = [];\n    return result.concat(...values);\n  }\n  // Based on our logic it should be an array of strings by now...\n  // assuming the user's path terminated in strings\n  return values;\n}\n\n/**\n * Gets all the values for the given keys in the given item and returns an array of those values\n * @param item - the item from which the values will be retrieved\n * @param keys - the keys to use to retrieve the values\n * @return objects with {itemValue, attributes}\n */\nfunction getAllValuesToRank(item, keys) {\n  const allValues = [];\n  for (let j = 0, J = keys.length; j < J; j++) {\n    const key = keys[j];\n    const attributes = getKeyAttributes(key);\n    const itemValues = getItemValues(item, key);\n    for (let i = 0, I = itemValues.length; i < I; i++) {\n      allValues.push({\n        itemValue: itemValues[i],\n        attributes\n      });\n    }\n  }\n  return allValues;\n}\nconst defaultKeyAttributes = {\n  maxRanking: Infinity,\n  minRanking: -Infinity\n};\n/**\n * Gets all the attributes for the given key\n * @param key - the key from which the attributes will be retrieved\n * @return object containing the key's attributes\n */\nfunction getKeyAttributes(key) {\n  if (typeof key === 'string') {\n    return defaultKeyAttributes;\n  }\n  return {\n    ...defaultKeyAttributes,\n    ...key\n  };\n}\n\n/*\neslint\n  no-continue: \"off\",\n*/\n\nexport { defaultBaseSortFn, matchSorter, rankings };\n"],"names":["rankings","defaultBaseSortFn","a","b","matchSorter","items","value","options","keys","threshold","baseSort","sorter","matchedItems","sortRankedValues","reduceItemsToRanked","_ref","item","matches","index","rankingInfo","getHighestRanking","rank","keyThreshold","stringItem","getMatchRanking","getAllValuesToRank","_ref2","_ref3","i","rankedValue","keyIndex","itemValue","attributes","newRank","newRankedValue","minRanking","maxRanking","testString","stringToRank","prepareValueForComparison","getAcronym","getClosenessRanking","string","acronym","wordInString","splitByHyphenWord","matchingInOrderCharCount","charNumber","findMatchingCharacter","matchChar","j","J","getRanking","spread","spreadPercentage","inOrderPercentage","firstIndex","I","aRank","aKeyIndex","bRank","bKeyIndex","_ref4","keepDiacritics","removeAccents","getItemValues","key","getNestedValues","path","values","nestedKey","nestedValues","nestedItem","nestedValue","allValues","getKeyAttributes","itemValues","defaultKeyAttributes"],"mappings":"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","x_google_ignoreList":[0]}